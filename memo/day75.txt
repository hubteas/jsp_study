day75
웹개발5 4일차
java 컬렉션 프레임워크 -> 람다식 -> 스트림API -> 웹서버와 WAS -> 아파치 톰캣 -> servelet

1. 컬렉션 프레임워크
	Collection 인터페이스와 Map 인터페이스

1) List 인터페이스 extends Collection
	구현 클래스 : ArrayList, Vector, LinkedList 
	순서 유지, 중복 허용

2) Set 인터페이스 extends Collection
	구현 클래스 : HashSet
	순서를 유지하지 않음, 중복 저장 불가능

3) Iterator 반복자 인터페이스
	컬렉션에 저장된 데이터들을 동일한 방식으로 가져오기 위한 인터페이스(타입)

	Set<E> set = new HashSet<>();
	Iterator<E> iterator = set.iterator();

-메소드
	hasNext() : 가져올 객체가 있으면 true, 가져올 객체가 없으면 false를 리턴
	next() : 컬렉션에서 하나의 객체를 가져온다
	remove() : next()로 가져온 객체를 Set 컬렉션에서 제거한다
	iterator() : 컬렉션 객체를 Iterator 타입으로 변환할 때 사용하는 메소드

4) Map 인터페이스
	key와 value를 한쌍으로 저장하여 key로 데이터에 접근할 수 있다
	데이터의 순서를 보장하지 않음
	구현클래스 : HashMap

- Hash
	키(key)는 해쉬함수를 통해 해시(hash)로 변경되며 해시는 값(value)와 매칭되어 저장소에 저장된다

- Hash Table
	데이터를 효율적으로 저장하고 검색하는 사용하는 자료구조
	key와 value 쌍으로 저장하며 key를 이용해서 value를 저장하고 검색한다
	key는 Hash로 변경되고 값과 매칭되어 저장소에 저장된다

2. 람다식
	익명메소드
	메소드를 하나의 식으로 표현한다
	함수형 인터페이스 @FunctionalInterface 
	함수형 인터페이스는 추상 메소드가 한개만 선언되기 때문에 람다식으로 재정의 할 때 메소드 이름이 필요없다

	(매개변수) -> { 실행할 코드 };
	1. 매개변수와 바디가 있는 기본형
	- 매개변수 1개일 때 : 소괄호, 자료형 생략가능(타입추론가능시)
	- 매개변수 2개 이상일때 : 소괄호 생략 불가, 자료형 생략가능(타입추론가능시)

	- 바디의 문이 1개일 때 : 중괄호 세미콜론 생략 가능
	- 바디의 문이 return 1개일 때 : 중괄호 , 세미콜론, return 생략가능
	- 바디의 문이 2줄 이상일 때 : 중괄호 생략 불가, 세미콜론 생략불가능
	- 바디의 문이 return 포함 2줄이상일 때 : 중괄호 생략 불가능, return 생략 불가능, 세미콜론 생략 불가능

3. 스트림 ( Stream )
	

[데이터관점]
	데이터, 패킷, 비트 등의연속성을 갖는 흐름을 의미
	작은 데이터 조각들이 하나의 줄기를 이루면서 순서대로 물 흐르듯이 전송되는 데이터 열을 의미.
	
1) 스트림 API
	JAVA 8 부터 도입된 API로 배열이나 컬렉션 같은 데이터 묶음을 편하고 효율적으로 처리하기 위해 제공됨
	선언형 프로그래밍을 자바로 구현해 놓은 클래스
	람다를 활용할 수 있는 기술이다
	스트림은 값의 흐름을 의미한다

2) 선언형 프로그래밍?
	명령형 프로그래밍 : 어떻게 할 것인가?(알고리즘에 중점)
	for(int i = 0; i<ar.length; i++){
		syso(ar[i]+1);
	}
	선언형 프로그래밍 : 무엇을 할 것인가?(목표에 중점)
	Arrays.stream(ar).foreach(num-> syso(num+1));

3) 스트림API의 특징
	스트림은 외부 반복을 통해 작업하는 컬렉션과는 달리 내부 반복을 통해 작업을 수행한다
	스트림을 재사용이 가능한 컬렉션과는 달리 단 한번만 사용할 수 있다
	스트림은 원본데이터를 변경하지 않는다
	스트림의 연산은 필터 - 맵 기반의 API를 사용하여 지연연산을 통해 성능을 최적화한다
	parallelStream() 메소드를 통한 병렬처리를 지원한다

4) 스트림의 타입
	기본타입 Stream
	IntStream int 타입의 데이터를 처리하기 위한 스트림
	DoubleStream
	LongStream

	객체타입 Stream
	Stream<T> : T 타입의 데이터를 처리하는 스트림
	
4. 스트림 API의 동작 흐름
	스트림 생성 -> 스트림의 중개연산(스트림의 변환) -> 스트림의 최종연산(스트림 사용)

1) 생성
	- 범위를 이용한 생성(IntStream, DoubleStream, LongStream)
	- Arrays를 이용한 생성
	- Collection 을 이용한 생성

2) 중간 연산
	- 반환타입 stream 이다
	- 몇번이든 사용이 가능하다

3) 최종연산 
	- 반환타입은 stream이 아니다
	- 한번만 사용이 가능하다

4. 웹 서버와 WAS
1) 웹 서버 (http Web Server)
	웹 어플리케이션을 실행하기 위한 서버이다
	클라이언트가 보낸 요청이 정적인 컨텐츠를 요구하는지 동적인 컨텐츠를 요구하는지 구분한다
	정적인 컨텐츠를 요청한다면 미리 준비한 웹 문서를 response응답에 담아서 보내주지만
	동적인 컨텐츠를 요청한다면 처리할 수 없다. 즉, 정적 페이지를 처리하는 서버이다.
	자바에서 사용하는 웹 서버는 대표적으로 Apache가 있다

2) WAS(Web Application Server)
	웹 서버와 동일하게 웹 어플리케이션을 실행하기 위한 서버이며, 웹 컨테이너(서블릿 컨테이너) 라고도 불린다
	웹 서버와는 다르게 정적, 동적 컨텐츠를 모두 처리할 수 있다
	단, 정적 컨텐츠 처리는 웹 서버에 비해 성능이 떨어진다
	동적 컨텐츠를 처리하기 위해 여러 연산 및 DB 접근을 수행하며 JAVA를 이용한다
	자바에서 사용하는 WAS는 대표적으로 Tomcat이 있다
	
	일반적으로 웹 어플리케이션을 운영할 때 웹 서버와 WAS를 같이 사용하여 정적인 페이지와 동적인 페이지를 분리하여 처리한다

3) 아파치 톰캣
	아파치 톰캣은 WAS로 분류되지만 Apache와 Tomcat을 합쳐놓은 형태이다
	즉, 일반적인 WAS와 달리 WEB Server를 포함하고 있다
	아파치 톰캣의 웹 서버는 정적 요청을 처리하며 동적 요청이 들어왔을 때 웹 컨테이너에게 요청을 전달한다
	그러면 웹 컨테이너는 동적 컨텐츠를 처리하여 웹서버에게 응답을 보낸다
	웹서버는 클라이언트에게 응답을 보낼 때 컨테이너에게 받은 결과를 포함시켜 보낸다















