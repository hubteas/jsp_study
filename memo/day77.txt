day77
웹개발5 6일차
복습 -> jsp 복습 -> 헤더/푸터 -> get/post -> forward/redirect -> jsp 태그

0. 복습
1) 정적 웹페이지와 동적 웹페이지
정적 웹페이지(Static Web Page)
   웹 서버에 저장되어 있는 파일을 그대로 웹 브라우저에 전송해 출력하는
   가장 기본적인 웹 페이지를 의미한다

동적 웹페이지(Dynaimic Web Page)
   동일한 페이지라고 해도 그 때 그 때 내용이 달라질 수 있는 웹페이지를 의미한다
   서버가 클라이언트의 요청을 해석하여 가장 적절한 웹페이지를 그 때 그 때
   생성해서 보내주는 기술이다


2) 탄생배경
   동적 웹 페이지 기술로 분류되지는 않지만 웹을 동적으로 만들기 위한 고대의 자바기술인 자바 애플릿(Java Applet)
   웹에서 실행되도록 설계된 자바 어플리케이션을 통채로 웹 브라우저로 전송한 후,
   자바 가상 머신을 탑재한 웹 브라우저가 이를 실행하는 방식으로 구동된다
   
   어플리케이션 전체가 클라이언트에 다운로드 된 후 실행되는 자바 애플릿은 속도나 보안성 등에서 한계가 있음
   -> 서버측에서 실행되는 서블릿이 등장했다
   클라이언트의 요청을 받으면 서버에서 처리한 후, 응답으로는 결과값만 보내주는 구조이다

   서블릿은 .java 자바파일을 컴파일한 .class형태로 이를 실행하고 관리하는 런타임을 서블릿 컨테이너라고 한다
   서블릿 컨테이너로는 아파치 톰캣이 있다

   자바 코드인데 결과로 보여줄 html 코드를 일일이 자바로 생성하고 조합하다보니 너무 많은 코드가 필요했고
   html을 기본으로 하고 필요한 부분만 자바 코드를 삽입하는 형태인 JSP가 탄생하게 되었다
   
3) JSP 구동방식
                  웹애플리케이션 웹서버
   웹브라우저      ----------------->      웹 서버
   (클라이언트)   <-----------------


                    웹 컨테이너(서블릿 컨테이너)
                  (서블릿 + jsp엔진)




   서블릿            jsp
   자바코드안에서 전체 html페이지 생성   HTML 코드안에서 필요한 부분만 자바코드를 스크립트 형태로 추가함
   변수선언 및 초기화가 반드시 선행됨   자주쓰이는 기능을 내장 객체로 제공하여 즉시 사용가능함
   컨트롤러를 만들 때 사용함      처리된 결과를 보여주는 뷰를 만들 때 사용함

4) JSP 파일 기본구조
   HTML 코드와 JAVA 코드를 혼합하여 웹페이지를 동적으로 생성하는 것이다
   .jsp 확장자를 가지며, 웹 서버에서 실행되어 클라이언트에게 HTML 결과를 반환한다


----------------------------------------------------------------------------------

[실습]
1. index.jsp에서 사용자에게 이름과 나이를 입력받고 result.jsp에 이름과 나이 출력하기
   result.jsp 결과화면
   000님 환영합니다
   000님의 2024년 나이는 -살 입니다

2. 서블릿을 수정하여 나이를 2025년 나이로 출력하기

3. 선택안함, 남자, 여자 라디오 버튼 3개 만들어서 result 페이지에 결과 출력하기

4. 취미를 선택할 수 있는 체크박스(4개)만들어서 result페이지에 결과 출력하기(심화 getParameterValues() 메소드 이용)

----------------------------------------------------------------------------------

1. GET과 POST 방식
GET 방식
   주소(URL)에 데이터를 추가하여 전달하는 방식
   쿼리스트링을 사용한다
   주소에 데이터가 추가되므로 길이에 제한이 있으며 데이터가 노출되므로 보안상 취약하지만 빠르다는 장점이 있다
   
   * 쿼리스트링 : 주소 뒤에 ?로 시작하는 문자열
   주소?PARAMETER1=value1&parameter2=value2&...

POST 방식
   데이터를 주소가 아닌 요청(req)에 저장하여 전송한다
   데이터의 길이에 제한이 있지만 GET 방식에 비해 대용량의 데이터를 전송할 수 있다
   보안상으로 GET방식보다 상대적으로 좋지만 다른 보안처리를 하지 않으면 여전히 취약하다
   GET방식에 비해 상대적으로 느리다

GET, POST 언제 사용하는가?
   데이터의 양이 적으며, 주소에 노출되어도 상관없다면 GET방식
   ex) 게시판 페이지 정보, 카테고리 정보
   
   데이터의 양이 많고, 민감한 데이터를 포함하고 있다면 POST방식
   ex) 로그인, 회원가입, 글쓰기정보

2. forward와 redirect
   서버에서 클라이언트 화면의 페이지를 전환시키는 방식
   
forward
   request.getRequestDispatcher("파일경로").forword(request, response);

   request 와 response를 가지고 매개변수로 넘겨준 파일로 이동한다
   클라이언트가 저장한 데이터를 계속 저장하고 있다
   해당 파일의 결과를 response에 담아 클라이언트에게 보낸다
   브라우저의 URL이 변경되지 않는다
   상대적으로 서버에 부담이 적다
   파일 경로 WEBAPP이 루트경로이다

redirect
   response.sendRedirect("URL 경로");
   
   사용자 브라우저를 특정 url로 바로 이동시킨다
   기존의 request, response를 버리기 때문에 클라이언트가 이전에 입력한 데이터를 저장하지 않는다
   브라우저의 url도 변경된다
   URL 경로는 우리가 설정한 루트경로를 기준으로 작성한다

   ex) /day77 url 루트경로, webapp 폴더를 의미한다
   /day77/hello 경로로 요청이 오면 web.xml에서 매핑된 경로를 찾아가고
   매핑된 경로가 없다면 webapp에서 파일을 찾는다